###############################################################################
# TEMPLATES.CFG - OBJECT TEMPLATES
#
# Last Modified: 08-18-2015
#
###############################################################################

###############################################################################
###############################################################################
#
# CONTACT TEMPLATES
#
###############################################################################
###############################################################################

define contact {
        name                            generic-contact    	; The name of this contact template
        service_notification_period     24x7			; service notifications can be sent anytime
        host_notification_period        24x7			; host notifications can be sent anytime
        service_notification_options    w,u,c,r,f,s		; send notifications for all service states, flapping events, and scheduled downtime events
        host_notification_options       d,u,r,f,s		; send notifications for all host states, flapping events, and scheduled downtime events
        service_notification_commands   notify-service-by-email	; send service notifications via email
        host_notification_commands      notify-host-by-email	; send host notifications via email
        register                        0       		; DONT REGISTER THIS DEFINITION - ITS NOT A REAL CONTACT, JUST A TEMPLATE!
}

###############################################################################
###############################################################################
#
# HOST TEMPLATES
#
###############################################################################
###############################################################################

define host {
        name                            generic-host    ; The name of this host template
        check_period                    24x7            ; By default, all hosts run 24x7
        check_interval                  2               ; Actively check the host every 5 minutes
        retry_interval                  1               ; Schedule host check retries at 1 minute intervals
        max_check_attempts              2               ; Check each host 2 times (max)
        check_command                   check-host-alive ; Default command to check hosts
        notification_period             24x7            ; By default, all hosts notify 24x7
        notifications_enabled           1       	; Host notifications are enabled
        event_handler_enabled           1       	; Host event handler is enabled
        flap_detection_enabled          1       	; Flap detection is enabled
        failure_prediction_enabled      1       	; Failure prediction is enabled
        process_perf_data               1       	; Process performance data
        retain_status_information       1       	; Retain status information across program restarts
        retain_nonstatus_information    1       	; Retain non-status information across program restarts
        notification_interval           0               ; Re-notify about service problems never
	notification_period		24x7		; Send host notifications at any time
        contact_groups                  ops             ; Notifications get sent to the ops by default
        register                        0       	; DONT REGISTER THIS DEFINITION - ITS NOT A REAL HOST, JUST A TEMPLATE!
}

###############################################################################
###############################################################################
#
# SERVICE TEMPLATES
#
###############################################################################
###############################################################################

{% if nagios_cc is defined %}
{%   for cc in nagios_cc|sort %}
define service {
        name                            {{ cc }}-service	 	; The 'name' of this service template
        active_checks_enabled           1       		; Active service checks are enabled
        passive_checks_enabled          1    		   	; Passive service checks are enabled/accepted
        parallelize_check               1       		; Active service checks should be parallelized
        obsess_over_service             1       		; We should obsess over this service (if necessary)
        check_freshness                 0       		; Default is to NOT check service 'freshness'
        notifications_enabled           1       		; Service notifications are enabled
        event_handler_enabled           1       		; Service event handler is enabled
        flap_detection_enabled          1       		; Flap detection is enabled
        failure_prediction_enabled      1       		; Failure prediction is enabled
        process_perf_data               1       		; Process performance data
        retain_status_information       1       		; Retain status information across program restarts
        retain_nonstatus_information    1       		; Retain non-status information across program restarts
        is_volatile                     0       		; The service is not volatile
        check_period                    24x7			; The service can be checked at any time of the day
        max_check_attempts              5			; Re-check the service up to 5 times in order to determine its final (hard) state
        normal_check_interval           5			; Check the service every five minutes under normal conditions
        retry_check_interval            1			; Re-check the service every minute until a hard state can be determined
        contact_groups                  {{ cc }}			; Notifications get sent out to everyone in the '{{ cc }}' group
        notification_options            w,u,c,r			; Send notifications about warning, unknown, critical, and recovery events
        notification_interval           0			; Re-notify about service problems never
        notification_period             24x7			; Notifications can be sent out at any time
        register                        0       		; DONT REGISTER THIS DEFINITION - ITS NOT A REAL SERVICE, JUST A TEMPLATE!
}

{%   endfor %}
{% endif %}

